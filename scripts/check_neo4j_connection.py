#!/usr/bin/env python3
"""
Script ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi Neo4j v√† setup database n·∫øu c·∫ßn
"""
import os
import sys
import asyncio
from pathlib import Path
from neo4j import AsyncGraphDatabase
from neo4j.exceptions import ServiceUnavailable, AuthError

# Add root directory to sys.path
sys.path.append(str(Path(__file__).parent.parent))

from src.utils.config import load_config
from dotenv import load_dotenv

load_dotenv()


async def check_neo4j_connection():
    """Ki·ªÉm tra k·∫øt n·ªëi Neo4j"""
    print("üîç KI·ªÇM TRA K·∫æT N·ªêI NEO4J...")

    try:
        config = load_config()
        neo4j_config = config["databases"]["neo4j"]

        print(f"üìã Th√¥ng tin k·∫øt n·ªëi:")
        print(f"  - URI: {neo4j_config['uri']}")
        print(f"  - User: {neo4j_config['user']}")
        print(f"  - Password: {neo4j_config['password']}")

        print(f"\nüîå ƒêang th·ª≠ k·∫øt n·ªëi...")

        # T·∫°o driver
        driver = AsyncGraphDatabase.driver(
            neo4j_config["uri"], auth=(neo4j_config["user"], neo4j_config["password"])
        )

        # Verify connectivity
        await driver.verify_connectivity()
        print("‚úÖ K·∫øt n·ªëi driver th√†nh c√¥ng!")

        # Test query ƒë·ªÉ l·∫•y th√¥ng tin database
        async with driver.session() as session:
            # Ki·ªÉm tra version
            result = await session.run(
                "CALL dbms.components() YIELD name, versions, edition"
            )
            components = await result.data()

            if components:
                for component in components:
                    if component["name"] == "Neo4j Kernel":
                        print(f"  - Neo4j version: {component['versions'][0]}")
                        print(f"  - Edition: {component['edition']}")

            # Ki·ªÉm tra database hi·ªán t·∫°i
            result = await session.run("CALL db.info()")
            db_info = await result.single()
            if db_info:
                print(f"  - Database name: {db_info.get('name', 'N/A')}")

            # ƒê·∫øm s·ªë nodes v√† relationships
            result = await session.run("MATCH (n) RETURN count(n) as node_count")
            node_count = await result.single()
            print(f"  - T·ªïng s·ªë nodes: {node_count['node_count']}")

            result = await session.run("MATCH ()-[r]->() RETURN count(r) as rel_count")
            rel_count = await result.single()
            print(f"  - T·ªïng s·ªë relationships: {rel_count['rel_count']}")

        await driver.close()
        return True

    except AuthError as e:
        print(f"‚ùå L·ªói x√°c th·ª±c: {e}")
        print("üí° H∆∞·ªõng d·∫´n:")
        print("  1. Ki·ªÉm tra username/password trong file .env")
        print("  2. ƒê·∫£m b·∫£o user c√≥ quy·ªÅn truy c·∫≠p database")
        return False

    except ServiceUnavailable as e:
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Neo4j service: {e}")
        print("üí° H∆∞·ªõng d·∫´n:")
        print("  1. ƒê·∫£m b·∫£o Neo4j server ƒëang ch·∫°y")
        print("  2. Ki·ªÉm tra URI trong file .env (bolt://localhost:7687)")
        print("  3. Ki·ªÉm tra firewall/port 7687")
        return False

    except ValueError as e:
        print(f"‚ùå L·ªói c·∫•u h√¨nh: {e}")
        print("üí° H∆∞·ªõng d·∫´n: T·∫°o file .env v·ªõi c√°c environment variables c·∫ßn thi·∫øt")
        return False

    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        print("üí° H∆∞·ªõng d·∫´n:")
        print("  1. ƒê·∫£m b·∫£o Neo4j server ƒëang ch·∫°y")
        print("  2. Ki·ªÉm tra th√¥ng tin trong file .env")
        print("  3. Th·ª≠ k·∫øt n·ªëi b·∫±ng Neo4j Browser")
        return False


async def check_neo4j_constraints():
    """Ki·ªÉm tra v√† t·∫°o constraints/indexes cho Neo4j"""
    print("\nüèóÔ∏è  KI·ªÇM TRA CONSTRAINTS V√Ä INDEXES...")

    try:
        config = load_config()
        neo4j_config = config["databases"]["neo4j"]

        driver = AsyncGraphDatabase.driver(
            neo4j_config["uri"], auth=(neo4j_config["user"], neo4j_config["password"])
        )

        async with driver.session() as session:
            # Ki·ªÉm tra constraints hi·ªán c√≥
            result = await session.run("SHOW CONSTRAINTS")
            constraints = await result.data()

            print(f"üìä Constraints hi·ªán c√≥: {len(constraints)}")
            for constraint in constraints:
                print(
                    f"  - {constraint.get('name', 'N/A')}: {constraint.get('description', 'N/A')}"
                )

            # Ki·ªÉm tra indexes hi·ªán c√≥
            result = await session.run("SHOW INDEXES")
            indexes = await result.data()

            print(f"üìä Indexes hi·ªán c√≥: {len(indexes)}")
            for index in indexes:
                print(
                    f"  - {index.get('name', 'N/A')}: {index.get('labelsOrTypes', 'N/A')} -> {index.get('properties', 'N/A')}"
                )

            # T·∫°o constraint cho LegalEntity n·∫øu ch∆∞a c√≥
            constraint_exists = any(
                "LegalEntity" in str(c.get("description", "")) for c in constraints
            )
            if not constraint_exists:
                print("\nüîß T·∫°o constraint cho LegalEntity...")
                try:
                    await session.run(
                        "CREATE CONSTRAINT legal_entity_name IF NOT EXISTS "
                        "FOR (e:LegalEntity) REQUIRE e.name IS UNIQUE"
                    )
                    print("‚úÖ ƒê√£ t·∫°o constraint cho LegalEntity.name")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ t·∫°o constraint: {e}")
            else:
                print("‚úÖ Constraint cho LegalEntity ƒë√£ t·ªìn t·∫°i")

        await driver.close()
        return True

    except Exception as e:
        print(f"‚ùå L·ªói ki·ªÉm tra constraints: {e}")
        return False


async def test_basic_operations():
    """Test c√°c operations c∆° b·∫£n"""
    print("\nüß™ TEST C√ÅC OPERATIONS C∆† B·∫¢N...")

    try:
        config = load_config()
        neo4j_config = config["databases"]["neo4j"]

        driver = AsyncGraphDatabase.driver(
            neo4j_config["uri"], auth=(neo4j_config["user"], neo4j_config["password"])
        )

        async with driver.session() as session:
            # Test t·∫°o node
            print("üîß Test t·∫°o test node...")
            await session.run(
                """
                MERGE (test:TestNode {name: 'connection_test'})
                SET test.created_at = datetime()
                RETURN test
                """
            )
            print("‚úÖ T·∫°o test node th√†nh c√¥ng")

            # Test query node
            print("üîç Test query test node...")
            result = await session.run(
                "MATCH (test:TestNode {name: 'connection_test'}) RETURN test"
            )
            test_node = await result.single()
            if test_node:
                print("‚úÖ Query test node th√†nh c√¥ng")
            else:
                print("‚ùå Kh√¥ng t√¨m th·∫•y test node")

            # X√≥a test node
            print("üóëÔ∏è  X√≥a test node...")
            await session.run(
                "MATCH (test:TestNode {name: 'connection_test'}) DELETE test"
            )
            print("‚úÖ X√≥a test node th√†nh c√¥ng")

        await driver.close()
        return True

    except Exception as e:
        print(f"‚ùå L·ªói test operations: {e}")
        return False


def check_env_file():
    """Ki·ªÉm tra file .env cho Neo4j"""
    print("üìÅ KI·ªÇM TRA FILE .ENV CHO NEO4J...")

    env_file = Path(".env")
    if not env_file.exists():
        print("‚ùå File .env kh√¥ng t·ªìn t·∫°i!")
        print("üí° T·∫°o file .env v·ªõi n·ªôi dung:")
        print(
            """
NEO4J_URI=bolt://localhost:7687
NEO4J_USER=neo4j
NEO4J_PASSWORD=neo4j_password

POSTGRES_HOST=127.0.0.1
POSTGRES_PORT=5432
POSTGRES_DB=legal_hirag
POSTGRES_USER=postgres
POSTGRES_PASSWORD=password123

CHROMA_PERSIST_DIRECTORY=./data/chroma_db
OPENAI_API_KEY=your_openai_api_key_here
        """
        )
        return False

    print("‚úÖ File .env t·ªìn t·∫°i")

    # Ki·ªÉm tra c√°c bi·∫øn c·∫ßn thi·∫øt cho Neo4j
    required_vars = ["NEO4J_URI", "NEO4J_USER", "NEO4J_PASSWORD"]

    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)

    if missing_vars:
        print(f"‚ùå Thi·∫øu environment variables cho Neo4j: {', '.join(missing_vars)}")
        return False
    else:
        print("‚úÖ T·∫•t c·∫£ environment variables cho Neo4j ƒë√£ ƒë∆∞·ª£c set")

        # Hi·ªÉn th·ªã th√¥ng tin config
        print(f"  - NEO4J_URI: {os.getenv('NEO4J_URI')}")
        print(f"  - NEO4J_USER: {os.getenv('NEO4J_USER')}")
        print(f"  - NEO4J_PASSWORD: {os.getenv('NEO4J_PASSWORD')}")

        return True


def check_neo4j_installation():
    """Ki·ªÉm tra Neo4j c√≥ ƒë∆∞·ª£c c√†i ƒë·∫∑t kh√¥ng"""
    print("\nüîç KI·ªÇM TRA NEO4J INSTALLATION...")

    try:
        import neo4j

        print(f"‚úÖ Neo4j Python driver ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t (version: {neo4j.__version__})")
        return True
    except ImportError:
        print("‚ùå Neo4j Python driver ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!")
        print("üí° C√†i ƒë·∫∑t b·∫±ng l·ªánh: pip install neo4j")
        return False


async def main():
    """Main function"""
    print("üöÄ KI·ªÇM TRA SETUP NEO4J")
    print("=" * 50)

    # 1. Ki·ªÉm tra Neo4j driver
    driver_ok = check_neo4j_installation()
    if not driver_ok:
        return

    # 2. Ki·ªÉm tra .env file
    env_ok = check_env_file()
    if not env_ok:
        return

    # 3. Ki·ªÉm tra k·∫øt n·ªëi Neo4j
    connection_ok = await check_neo4j_connection()
    if not connection_ok:
        return

    # 4. Ki·ªÉm tra constraints v√† indexes
    await check_neo4j_constraints()

    # 5. Test basic operations
    await test_basic_operations()

    print("\n" + "=" * 50)
    print("‚úÖ KI·ªÇM TRA NEO4J HO√ÄN T·∫§T!")
    print("üí° Neo4j s·∫µn s√†ng s·ª≠ d·ª•ng cho Legal HiRAG system!")


if __name__ == "__main__":
    asyncio.run(main())
# python scripts/check_neo4j_connection.py
