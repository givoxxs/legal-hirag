#!/usr/bin/env python3
import asyncio
import sys
from pathlib import Path

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.legal_hirag.core.document_parser import LegalDocumentParser
from src.legal_hirag.models.query_models import LegalQueryParam, LegalQueryMode
from src.legal_hirag.storage.storage_manager import LegalStorageManager
from src.legal_hirag.query.query_processor import LegalQueryProcessor
from src.legal_hirag.utils.config import load_config


async def demo_legal_hirag():
    """Demonstrate Legal HiRAG system capabilities"""

    print("üöÄ Legal HiRAG System Demo")
    print("=" * 50)

    # Load configuration
    config = load_config("src/config/legal_config.yaml")

    # Initialize components
    storage = LegalStorageManager(config)
    query_processor = LegalQueryProcessor(storage, config["llm"])

    # Sample legal document
    sample_text = """  
B·ªò LU·∫¨T D√ÇN S·ª∞  
  
CH∆Ø∆†NG I: NH·ªÆNG QUY ƒê·ªäNH CHUNG  
  
ƒêi·ªÅu 1. Ph·∫°m vi ƒëi·ªÅu ch·ªânh  
B·ªô lu·∫≠t n√†y quy ƒë·ªãnh quy·ªÅn, nghƒ©a v·ª• c·ªßa c√° nh√¢n, ph√°p nh√¢n trong quan h·ªá d√¢n s·ª±.  
  
ƒêi·ªÅu 2. Nguy√™n t·∫Øc b√¨nh ƒë·∫≥ng  
M·ªçi c√° nh√¢n, ph√°p nh√¢n ƒë·ªÅu b√¨nh ƒë·∫≥ng tr∆∞·ªõc ph√°p lu·∫≠t.  
  
CH∆Ø∆†NG II: CH·ª¶ TH·ªÇ QUAN H·ªÜ D√ÇN S·ª∞  
  
ƒêi·ªÅu 3. C√° nh√¢n  
C√° nh√¢n l√† ch·ªß th·ªÉ c√≥ nƒÉng l·ª±c ph√°p l√Ω d√¢n s·ª±.  
  
ƒêi·ªÅu 4. Ph√°p nh√¢n  
Ph√°p nh√¢n l√† t·ªï ch·ª©c c√≥ t∆∞ c√°ch ph√°p l√Ω ƒë·ªôc l·∫≠p.  
"""

    print("üìÑ Processing sample legal document...")

    # Parse document
    parser = LegalDocumentParser()
    document = parser.parse_document(sample_text, "demo_bo_luat_dan_su")

    print(f"   ‚úÖ Parsed {len(document.provisions)} provisions")

    # Demo queries
    demo_queries = [
        {
            "question": "Ai c√≥ th·ªÉ tham gia quan h·ªá d√¢n s·ª±?",
            "mode": LegalQueryMode.LOCAL,
            "description": "Local Query - T√¨m th√¥ng tin c·ª• th·ªÉ",
        },
        {
            "question": "Nguy√™n t·∫Øc c∆° b·∫£n c·ªßa ph√°p lu·∫≠t d√¢n s·ª± l√† g√¨?",
            "mode": LegalQueryMode.GLOBAL,
            "description": "Global Query - T√¨m hi·ªÉu t·ªïng quan",
        },
        {
            "question": "M·ªëi quan h·ªá gi·ªØa c√° nh√¢n v√† ph√°p nh√¢n trong ph√°p lu·∫≠t?",
            "mode": LegalQueryMode.BRIDGE,
            "description": "Bridge Query - Ph√¢n t√≠ch m·ªëi li√™n h·ªá",
        },
        {
            "question": "T·ªïng quan v·ªÅ ch·ªß th·ªÉ quan h·ªá d√¢n s·ª±?",
            "mode": LegalQueryMode.HIERARCHICAL,
            "description": "Hierarchical Query - Ph√¢n t√≠ch to√†n di·ªán",
        },
    ]

    print(f"\nüîç Testing {len(demo_queries)} query modes...")

    for i, query_config in enumerate(demo_queries, 1):
        print(f"\n--- Query {i}: {query_config['description']} ---")
        print(f"‚ùì Question: {query_config['question']}")

        # Create query parameters
        params = LegalQueryParam(
            mode=query_config["mode"], top_k=10, response_type="Multiple Paragraphs"
        )

        try:
            # Process query
            result = await query_processor.process_query(
                query_config["question"], params
            )

            print(f"ü§ñ Answer ({result.mode}):")
            print(f"   {result.answer}")
            print(f"‚è±Ô∏è  Processing time: {result.processing_time:.2f}s")
            print(f"üìä Entities retrieved: {len(result.entities_retrieved)}")

        except Exception as e:
            print(f"‚ùå Error: {e}")

    print(f"\nüéâ Demo completed successfully!")

    # Cleanup
    await storage.close_connections()


if __name__ == "__main__":
    asyncio.run(demo_legal_hirag())
