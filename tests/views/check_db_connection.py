#!/usr/bin/env python3
"""
Script ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi database v√† setup database n·∫øu c·∫ßn
"""
import os
import sys
import asyncio
import asyncpg
from pathlib import Path

# Add root directory to sys.path
sys.path.append(str(Path(__file__).parent.parent))

from src.utils.config import load_config
from dotenv import load_dotenv

load_dotenv()


async def check_postgres_connection():
    """Ki·ªÉm tra k·∫øt n·ªëi PostgreSQL"""
    print("üîç KI·ªÇM TRA K·∫æT N·ªêI POSTGRESQL...")

    try:
        config = load_config()
        postgres_config = config["databases"]["postgres"]

        print(f"üìã Th√¥ng tin k·∫øt n·ªëi:")
        print(f"  - Host: {postgres_config['host']}")
        print(f"  - Port: {postgres_config['port']}")
        print(f"  - Database: {postgres_config['database']}")
        print(f"  - User: {postgres_config['user']}")

        # T·∫°o connection string
        connection_string = (
            f"postgresql://{postgres_config['user']}:{postgres_config['password']}"
            f"@{postgres_config['host']}:{postgres_config['port']}"
            f"/{postgres_config['database']}"
        )

        print(f"\nüîå ƒêang th·ª≠ k·∫øt n·ªëi...")
        conn = await asyncpg.connect(connection_string)

        # Test query
        result = await conn.fetchrow("SELECT version()")
        print(f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!")
        print(f"  - PostgreSQL version: {result['version']}")

        await conn.close()
        return True

    except ValueError as e:
        print(f"‚ùå L·ªói c·∫•u h√¨nh: {e}")
        print("üí° H∆∞·ªõng d·∫´n: T·∫°o file .env v·ªõi c√°c environment variables c·∫ßn thi·∫øt")
        return False

    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi database: {e}")
        print("üí° H∆∞·ªõng d·∫´n:")
        print("  1. ƒê·∫£m b·∫£o PostgreSQL server ƒëang ch·∫°y")
        print("  2. Ki·ªÉm tra th√¥ng tin trong file .env")
        print("  3. T·∫°o database n·∫øu ch∆∞a c√≥")
        return False


async def setup_database_tables():
    """T·∫°o tables n·∫øu ch∆∞a c√≥"""
    print("\nüèóÔ∏è  KI·ªÇM TRA V√Ä T·∫†O TABLES...")

    try:
        config = load_config()
        postgres_config = config["databases"]["postgres"]

        connection_string = (
            f"postgresql://{postgres_config['user']}:{postgres_config['password']}"
            f"@{postgres_config['host']}:{postgres_config['port']}"
            f"/{postgres_config['database']}"
        )

        conn = await asyncpg.connect(connection_string)

        # Ki·ªÉm tra table legal_documents
        result = await conn.fetchrow(
            """
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'legal_documents'
            );
        """
        )

        if result["exists"]:
            print("‚úÖ Table 'legal_documents' ƒë√£ t·ªìn t·∫°i")
        else:
            print("‚ö†Ô∏è  Table 'legal_documents' ch∆∞a t·ªìn t·∫°i")
            print("üí° Ch·∫°y script setup_databases.py ƒë·ªÉ t·∫°o tables")

        # Ki·ªÉm tra table legal_chunks
        result = await conn.fetchrow(
            """
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'legal_chunks'
            );
        """
        )

        if result["exists"]:
            print("‚úÖ Table 'legal_chunks' ƒë√£ t·ªìn t·∫°i")
        else:
            print("‚ö†Ô∏è  Table 'legal_chunks' ch∆∞a t·ªìn t·∫°i")
            print("üí° Ch·∫°y script setup_databases.py ƒë·ªÉ t·∫°o tables")

        await conn.close()
        return True

    except Exception as e:
        print(f"‚ùå L·ªói ki·ªÉm tra tables: {e}")
        return False


def check_env_file():
    """Ki·ªÉm tra file .env"""
    print("üìÅ KI·ªÇM TRA FILE .ENV...")

    env_file = Path(".env")
    if not env_file.exists():
        print("‚ùå File .env kh√¥ng t·ªìn t·∫°i!")
        print("üí° T·∫°o file .env v·ªõi n·ªôi dung:")
        print(
            """
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=legal_hirag
POSTGRES_USER=postgres
POSTGRES_PASSWORD=password123

NEO4J_URI=bolt://localhost:7687
NEO4J_USER=neo4j
NEO4J_PASSWORD=neo4j_password

CHROMA_PERSIST_DIRECTORY=./data/chroma_db
OPENAI_API_KEY=your_openai_api_key_here
        """
        )
        return False

    print("‚úÖ File .env t·ªìn t·∫°i")

    # Ki·ªÉm tra c√°c bi·∫øn c·∫ßn thi·∫øt
    required_vars = [
        "POSTGRES_HOST",
        "POSTGRES_DB",
        "POSTGRES_USER",
        "POSTGRES_PASSWORD",
    ]

    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)

    if missing_vars:
        print(f"‚ùå Thi·∫øu environment variables: {', '.join(missing_vars)}")
        return False
    else:
        print("‚úÖ T·∫•t c·∫£ environment variables c·∫ßn thi·∫øt ƒë√£ ƒë∆∞·ª£c set")
        return True


async def main():
    """Main function"""
    print("üöÄ KI·ªÇM TRA SETUP DATABASE")
    print("=" * 50)

    # 1. Ki·ªÉm tra .env file
    env_ok = check_env_file()
    if not env_ok:
        return

    # 2. Ki·ªÉm tra k·∫øt n·ªëi database
    connection_ok = await check_postgres_connection()
    if not connection_ok:
        return

    # 3. Ki·ªÉm tra tables
    await setup_database_tables()

    print("\n" + "=" * 50)
    print("‚úÖ KI·ªÇM TRA HO√ÄN T·∫§T!")


if __name__ == "__main__":
    asyncio.run(main())
